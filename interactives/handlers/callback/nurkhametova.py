import asyncio
from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.enums import ChatAction

from core.utils.answer_choices import nurkhametova_correct_answers
from core.utils.enums import Variables
from core.utils.nurkhametova_data import explanations, buttons_1, buttons_2, nurkhametova_answers
from core.utils.animate_waiting_message import animate_next_question_loading, send_animation_one_question
from core.utils.scoring_utils import add_user_score


router = Router(name="nurkhametova_callback_router")


@router.callback_query(F.data == "nurkhametova_start_interactive")
async def nurkhametova_start_interactive(call: CallbackQuery, variables: Variables):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ—ç—Ç–∞–ø–Ω–æ"""
    await call.answer()
    await call.message.delete()
    await asyncio.sleep(1)
    
    await send_animation_one_question(
        call=call,
        variables=variables,
        start_text="üìç <b>–°–∏—Ç—É–∞—Ü–∏—è:</b> –ø–æ—Å–ª–µ —Ä–∞–∑–≤–æ–¥–∞ –æ—Ç–µ—Ü –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –∑–∞–ø—Ä–µ—â–∞–µ—Ç –º–∞—Ç–µ—Ä–∏ –≤–∏–¥–µ—Ç—å—Å—è —Å —Ä–µ–±—ë–Ω–∫–æ–º.",
        question_text="<b>–í–æ–ø—Ä–æ—Å: —ç—Ç–æ —É—â–µ–º–ª—è–µ—Ç _____ —Ä–æ–¥–∏—Ç–µ–ª—è?</b>",
        buttons_data=buttons_1,
        callback_prefix="nurkhametova_question_1"
    )


@router.callback_query(F.data.startswith("nurkhametova_question_1_"))
async def nurkhametova(call: CallbackQuery, variables: Variables):
    await call.answer()
    selected_index = int(call.data.split("_")[-1])
    key = "question_1"
    
    await call.message.edit_reply_markup(reply_markup=None)
    await call.bot.send_chat_action(chat_id=call.message.chat.id, action=ChatAction.TYPING)
    await asyncio.sleep(1.5)
    
    is_correct = selected_index == nurkhametova_correct_answers[key]
    
    if is_correct:
        text = nurkhametova_answers[key]["correct"]
        await add_user_score(call=call, variables=variables, interactive_name="nurkhametova")
    else:
        text = nurkhametova_answers[key]["incorrect"][selected_index]
        
    await call.message.answer(text=text)
    await asyncio.sleep(2)
    await animate_next_question_loading(message=call.message, bot=call.bot)
    await send_animation_one_question(
        call=call,
        variables=variables,
        start_text="<b>–í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å\nüìç –ù–æ–≤—ã–π –∫–µ–π—Å:</b> –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ —Ä–µ–±–µ–Ω–∫—É –º–µ—Å—Ç–æ –≤ –¥–µ—Ç—Å–∫–æ–º —Å–∞–¥—É.",
        question_text="<b>–í–æ–ø—Ä–æ—Å: –∫–∞–∫–æ–µ –ø—Ä–∞–≤–æ –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –Ω–∞—Ä—É—à–µ–Ω–æ?</b>",
        buttons_data=buttons_2,
        callback_prefix="nurkhametova_question_2"
    )


@router.callback_query(F.data.startswith("nurkhametova_question_2_"))
async def nurkhametova1(call: CallbackQuery, variables: Variables):
    await call.answer()
    selected_index = int(call.data.split("_")[-1])
    key = "question_2"

    await call.message.edit_reply_markup(reply_markup=None)
    await call.bot.send_chat_action(chat_id=call.message.chat.id, action=ChatAction.TYPING)
    await asyncio.sleep(1.5)
    
    is_correct = selected_index == nurkhametova_correct_answers[key]
    
    if is_correct:
        text = nurkhametova_answers[key]["correct"]
        await add_user_score(call=call, variables=variables, interactive_name="nurkhametova")
    else:
        text = nurkhametova_answers[key]["incorrect"][selected_index]
        
    await call.message.answer(text=text)
