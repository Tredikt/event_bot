from core.operations import KeyboardOperations
from core.utils.answer_choices import answer_choices, horoshutina_sequence, sadriev_test
from interactives.states import HoroshutinaState


class InteractiveKeyboard(KeyboardOperations):
    def __init__(self):
        super().__init__()
        self.horoshutina_states = {}
        
    async def performance_ending(self, interactive_name: str):
        buttons = {
            "–ö—Ä—É—Ç–æ": f"ending_{interactive_name}_cool",
            "–ù–µ–ø–ª–æ—Ö–æ": f"ending_{interactive_name}_good",
            "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–∏–∫–µ—Ä—É": f"ask_speaker_{interactive_name}"
        }
        return await self.create_keyboard(buttons=buttons)

    async def nurkhametova_menu(self):
        buttons = {
            "C–µ–º–µ–π–Ω—ã–µ –ø—Ä–∞–≤–∞": "nurkhametova_menu_true",
            "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞": "nurkhametova_menu_false",
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∞": "nurkhametova_menu_false"
        }
        return await self.create_keyboard(buttons=buttons)

    async def nurkhametova_start(self):
        buttons = {
            "–ü—Ä–∞–≤–æ –Ω–∞ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–π —Å—É–¥ (—Å—Ç. 46 –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏)": "nurkhametova_start_true",
            "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ –ø—Ä–∞–≤–æ": "nurkhametova_start_false",
            "–ü—Ä–∞–≤–æ –Ω–∞ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ": "nurkhametova_start_false"
        }
        return await self.create_keyboard(buttons=buttons)

    async def nurkhametova_start1(self):
        buttons = {
            "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ –ø—Ä–∞–≤–æ": "nurkhametova_start1_false",
            "–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–∞–≤–æ": "nurkhametova_start1_true",
            "–ü—Ä–∞–≤–æ –Ω–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": "nurkhametova_start1_false"
        }
        return await self.create_keyboard(buttons=buttons)

    async def nurkhametova_start2(self):
        buttons = {
            "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞": "nurkhametova_start2_false",
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∞": "nurkhametova_start2_true",
            "–ñ–∏–ª–∏—â–Ω—ã–µ –ø—Ä–∞–≤–∞": "nurkhametova_start2_false"
        }
        return await self.create_keyboard(buttons=buttons)

    async def belozyortseva_menu(self, number_test: int):
        test_data = answer_choices[number_test - 1]
        options = test_data["options"]
        correct_index = test_data["correct_index"]

        buttons = {
            option: f"belozyortseva_test_{number_test}_{'true' if idx == correct_index else 'false'}"
            for idx, option in enumerate(options)
        }

        return await self.create_keyboard(buttons=buttons)

    async def gavrikov_menu(self):
        buttons = {
            "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç": "gavrikov_start"
        }
        return await self.create_keyboard(buttons=buttons)

    async def gavrikov_start(self):
        buttons = {
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –ñ–ö–•?": "gavrikov_pictures",
            "–ù–µ –ø–æ–Ω–∏–º–∞—é": "gavrikov_pictures",
            "–ü–æ–Ω–∏–º–∞—é": "gavrikov_pictures",
            "–Ø —Å–∞–º —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞": "gavrikov_pictures",
        }
        return await self.create_keyboard(buttons=buttons)

    async def mendubaev_menu(self):
        buttons = {
            "1 –í–∞—Ä–∏–∞–Ω—Ç": "mendubaev_1",
            "2 –í–∞—Ä–∏–∞–Ω—Ç": "mendubaev_2"
        }
        return await self.create_keyboard(buttons=buttons)

    async def mendubaev_1(self):
        buttons = {
            "1 –í–∞—Ä–∏–∞–Ω—Ç": "1_mendubaev_1",
            "2 –í–∞—Ä–∏–∞–Ω—Ç": "1_mendubaev_2"
        }
        return await self.create_keyboard(buttons=buttons)

    async def mendubaev_2(self):
        buttons = {
            "1 –í–∞—Ä–∏–∞–Ω—Ç": "2_mendubaev_1",
            "2 –í–∞—Ä–∏–∞–Ω—Ç": "2_mendubaev_2"
        }
        return await self.create_keyboard(buttons=buttons)

    async def mendubaev_final_1(self):
        buttons = {
            "1 –í–∞—Ä–∏–∞–Ω—Ç": "final_mendubaev_1",
            "2 –í–∞—Ä–∏–∞–Ω—Ç": "final_mendubaev_1"
        }
        return await self.create_keyboard(buttons=buttons)

    async def mendubaev_final_2(self):
        buttons = {
            "1 –í–∞—Ä–∏–∞–Ω—Ç": "final_mendubaev_2",
            "2 –í–∞—Ä–∏–∞–Ω—Ç": "final_mendubaev_2"
        }
        return await self.create_keyboard(buttons=buttons)

    async def zabegayev_menu(self):
        buttons = {
            "–ü—Ä–∞–≤–¥–∞": "start_zabegayev_false",
            "–õ–æ–∂—å": "start_zabegayev_true"
        }
        return await self.create_keyboard(buttons=buttons)

    async def zabegayev_1(self):
        buttons = {
            "–ü—Ä–∞–≤–¥–∞": "zabegayev_1_false",
            "–õ–æ–∂—å": "zabegayev_1_true"
        }
        return await self.create_keyboard(buttons=buttons)


    async def zabegayev_2(self):
        buttons = {
            "–ü—Ä–∞–≤–¥–∞": "zabegayev_2_true",
            "–õ–æ–∂—å": "zabegayev_2_false"
        }
        return await self.create_keyboard(buttons=buttons)
    
    async def interactive_horoshutina(self, user_id):
        if user_id not in self.horoshutina_states:
            self.horoshutina_states[user_id] = HoroshutinaState()
            
        state: HoroshutinaState = self.horoshutina_states[user_id]

        if await state.is_completed():
            state = self.horoshutina_states[user_id]

        if await state.is_completed():
            return await self.create_keyboard({"üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ!": "horoshutina_completed"})
        
        buttons = {}
        for item in horoshutina_sequence:
            word = item["word"]
            order = item["order"]
            word_id = item["id"]
            
            display_text = word
            
            if word in state.completed_steps:
                number_emoji = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£"][order - 1]
                display_text = f"{number_emoji} {word}"
            elif word in state.wrong_selections:
                display_text = f"‚ùå {word}"
                
            buttons[display_text] = f"horoshutina_{word_id}"
        
        return await self.create_keyboard(buttons=buttons)

    async def sadriev_test(self):
        options = sadriev_test["options"]
        correct_index = sadriev_test["correct_index"]

        buttons = {
            option: f"sadriev_test_{'true' if idx == correct_index else 'false'}"
            for idx, option in enumerate(options)
        }

        return await self.create_keyboard(buttons=buttons)


    async def horoshutina_menu(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤ –•–æ—Ä–æ—à—É—Ç–∏–Ω–æ–π - –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏"""
        buttons = {}
        for item in horoshutina_sequence:
            word = item["word"]
            word_id = item["id"]
            buttons[word] = f"horoshutina_{word_id}"
        
        return await self.create_keyboard(buttons=buttons)

    async def zargaryan_menu(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤ –ó–∞—Ä–≥–∞—Ä—è–Ω - –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã"""
        buttons = {
            "–í–∞—Ä–∏–∞–Ω—Ç 1": "zargaryan_1",
            "–í–∞—Ä–∏–∞–Ω—Ç 2": "zargaryan_2",
            "–í–∞—Ä–∏–∞–Ω—Ç 3": "zargaryan_3"
        }
        return await self.create_keyboard(buttons=buttons)

