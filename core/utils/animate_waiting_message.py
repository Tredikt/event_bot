import asyncio
from aiogram.enums import ChatAction
from aiogram.types import Message, CallbackQuery
from aiogram import Bot
from aiogram.utils.keyboard import InlineKeyboardBuilder

from core.utils.enums import Variables


async def animate_next_question_loading(message: Message, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
    progress_stages = []
    for percent in range(0, 101, 10):
        filled_blocks = percent // 10
        empty_blocks = 10 - filled_blocks
        bar = "‚ñà" * filled_blocks + "‚ñë" * empty_blocks
        progress_text = (f"‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n‚ïë {bar} {percent:3d}%     ‚ïë\n‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n*–°—É–ø–µ—Ä, –ø—Ä–∏–Ω—è–ª —Ç–≤–æ–π –æ—Ç–≤–µ—Ç. –°–µ–π—á–∞—Å –ø—Ä–æ–≤–µ—Ä—é –µ–≥–æ‚Ä¶ üß†*")
        
        progress_stages.append(progress_text)
    
    loading_message = await message.answer(text=f"```\n{progress_stages[0]}\n```", parse_mode="Markdown")
    
    for stage in progress_stages[1:]:
        try:
            await loading_message.edit_text(text=f"```\n{stage}\n```", parse_mode="Markdown")
            await asyncio.sleep(0.4)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {e}")
    
    final_message = ("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n‚ïë ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 100%      ‚ïë\n‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n‚úÖ –í–æ–ø—Ä–æ—Å –≥–æ—Ç–æ–≤!")
    
    try:
        await loading_message.edit_text(text=f"```\n{final_message}\n```", parse_mode="Markdown")
        await asyncio.sleep(0.5)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {e}")
    
    await loading_message.delete()


async def animate_answer_analysis(message: Message, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)
    progress_stages = []
    thinking_animations = [".", ".ü§î", "...", "..ü§ñ", "..", "..üßê", "."]
    
    for i, percent in enumerate(range(0, 101, 10)):
        filled_blocks = percent // 10
        empty_blocks = 10 - filled_blocks
        bar = "‚ñà" * filled_blocks + "‚ñë" * empty_blocks
        dots = thinking_animations[i % len(thinking_animations)]
        progress_text = (f"‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n‚ïë {bar} {percent:3d}%     ‚ïë\n‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n–ü—Ä–∏–Ω—è–ª. –°–µ–π—á–∞—Å —Å–≤–µ—Ä–∏–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º üìä{dots}")
        progress_stages.append(progress_text)
    
    loading_message = await message.answer(text=f"```\n{progress_stages[0]}\n```", parse_mode="Markdown")
    
    for stage in progress_stages[1:]:
        try:
            await loading_message.edit_text(text=f"```\n{stage}\n```", parse_mode="Markdown")
            await asyncio.sleep(0.4)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
    
    final_message = ("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n‚ïë ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 100%      ‚ïë\n‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!")
    
    try:
        await loading_message.edit_text(text=f"```\n{final_message}\n```", parse_mode="Markdown")
        await asyncio.sleep(0.5)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
    
    await loading_message.delete()


async def animate_buttons_appearance(message: Message, bot: Bot, buttons_data: dict, callback_prefix: str, final_text: str = None):
    """–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é"""
    builder = InlineKeyboardBuilder()
    await asyncio.sleep(0.8)
    
    text_to_use = final_text if final_text is not None else message.text
    
    for idx, (button_text, callback_data) in enumerate(buttons_data.items()):
        await asyncio.sleep(0.6)
        builder.button(text=button_text, callback_data=callback_data)
        builder.adjust(1)
        try:
            await message.edit_text(
                text=text_to_use,
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫: {e}")
        await asyncio.sleep(0.5)


async def send_staged_question(
    call: CallbackQuery, 
    variables: Variables,
    start_text: str,
    main_text: str, 
    question_text: str, 
    buttons_data: dict, 
    callback_prefix: str,
    main_text_delay: float = 2.5,
    question_delay: float = 2.0
):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—ç—Ç–∞–ø–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    
    Args:
        call: CallbackQuery –æ–±—ä–µ–∫—Ç
        variables: Variables –æ–±—ä–µ–∫—Ç
        start_text: –°—Ç–∞—Ä—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ê –≤–æ—Ç –∏ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å...")
        main_text: –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ë—ç–∫–µ–Ω–¥ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞–∑–¥–µ–ª—ë–Ω –Ω–∞ –¥–≤–µ –∫–ª—é—á–µ–≤—ã–µ —á–∞—Å—Ç–∏")
        question_text: –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ö–∞–∫–∏–µ?")
        buttons_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–æ–∫ {text: callback_data}
        callback_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data –∫–Ω–æ–ø–æ–∫
        main_text_delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2.5 —Å–µ–∫)
        question_delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ "–í–æ–ø—Ä–æ—Å...." (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2.0 —Å–µ–∫)
    """
    message = await call.message.answer(text=start_text)
    
    await call.bot.send_chat_action(chat_id=call.message.chat.id, action=ChatAction.TYPING)
    await asyncio.sleep(main_text_delay)
    
    combined_text = f"{start_text}\n\n{main_text}"
    try:
        await message.edit_text(text=combined_text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (main_text): {e}")
    
    await variables.bot.send_chat_action(chat_id=call.message.chat.id, action=ChatAction.TYPING)
    await asyncio.sleep(question_delay)
    
    final_text = f"{start_text}\n\n{main_text}\n\n{question_text}"
    try:
        await message.edit_text(text=final_text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (question_text): {e}")
    
    await animate_buttons_appearance(
        message=message,
        bot=call.bot,
        buttons_data=buttons_data,
        callback_prefix=callback_prefix,
        final_text=final_text
    )

async def send_animation_one_question(
    call: CallbackQuery, 
    variables: Variables,
    start_text: str,
    question_text: str, 
    buttons_data: dict, 
    callback_prefix: str,
    main_text_delay: float = 2.5,
    question_delay: float = 2.0
):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—ç—Ç–∞–ø–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π (—Ç–æ–ª—å–∫–æ start_text + question_text)
    
    Args:
        call: CallbackQuery –æ–±—ä–µ–∫—Ç
        variables: Variables –æ–±—ä–µ–∫—Ç
        start_text: –°—Ç–∞—Ä—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ê –≤–æ—Ç –∏ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å...")
        question_text: –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ö–∞–∫–∏–µ?")
        buttons_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–æ–∫ {text: callback_data}
        callback_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data –∫–Ω–æ–ø–æ–∫
        main_text_delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2.5 —Å–µ–∫)
        question_delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ "–í–æ–ø—Ä–æ—Å...." (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2.0 —Å–µ–∫)
    """
    message = await call.message.answer(text=start_text)
    await call.bot.send_chat_action(chat_id=call.message.chat.id, action=ChatAction.TYPING)
    await asyncio.sleep(main_text_delay)
    
    final_text = f"{start_text}\n\n{question_text}"
    try:
        await message.edit_text(text=final_text, parse_mode="HTML")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    await asyncio.sleep(question_delay)
    
    await animate_buttons_appearance(
        message=message,
        bot=call.bot,
        buttons_data=buttons_data,
        callback_prefix=callback_prefix,
        final_text=final_text
    )