from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, BufferedInputFile
from aiogram.enums import ChatAction

from core.utils.enums import Variables
from admin.services.analytics_service import AnalyticsService
from settings import config


router = Router(name="admin_command_router")


@router.message(Command("admin"))
async def admin_message_handler(message: Message, variables: Variables):
    user_id = str(message.from_user.id)
    username = message.from_user.username
    admins = config.ADMINS.split(",")
    admins_usernames = config.ADMINS_USERNAMES.split(",")

    if user_id in admins or username in admins_usernames:
        sent_message = await message.answer(
            text="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
            reply_markup=await variables.keyboards.admin.menu()
        )
        variables.keyboards.admin.set_admin_message_id(sent_message.message_id)


@router.message(Command("get_excel"))
async def admin_get_excel(message: Message, variables: Variables):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    user_id = str(message.from_user.id)
    username = message.from_user.username
    admins = config.ADMINS.split(",")
    admins_usernames = config.ADMINS_USERNAMES.split(",")

    if user_id in admins or username in admins_usernames:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await variables.bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.UPLOAD_DOCUMENT)
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel —Ñ–∞–π–ª
            analytics_service = AnalyticsService()
            excel_data = await analytics_service.generate_analytics_excel(variables)
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            from datetime import datetime
            filename = f"analytics_technobars_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            excel_file = BufferedInputFile(
                file=excel_data,
                filename=filename
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            await message.answer_document(
                document=excel_file,
                caption="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¢–ï–•–ù–û–ë–ê–†–°\n\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω Excel —Ñ–∞–π–ª —Å –ø–æ–ª–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –ø–æ –≤—Å–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–∞–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."
            )
            
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel: {str(e)}")
            print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel: {e}")


@router.message(Command("get_photo_id"))
async def get_photo_id(message: Message, variables: Variables):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    user_id = str(message.from_user.id)
    username = message.from_user.username
    admins = config.ADMINS.split(",")
    admins_usernames = config.ADMINS_USERNAMES.split(",")

    if user_id in admins or username in admins_usernames:
        await message.answer(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ file_id"
        )


@router.message(F.photo)
async def photo_handler(message: Message, variables: Variables):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è file_id"""
    user_id = str(message.from_user.id)
    username = message.from_user.username
    admins = config.ADMINS.split(",")
    admins_usernames = config.ADMINS_USERNAMES.split(",")

    if user_id in admins or username in admins_usernames:
        photo_id = message.photo[-1].file_id
        await message.reply(
            f"üì∑ ID —ç—Ç–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:\n<code>{photo_id}</code>\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç ID –≤ –∫–æ–¥–µ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç—Ç–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏."
        )
